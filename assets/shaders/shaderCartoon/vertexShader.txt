//Especificar version de Opengl a utilizar
#version 330 core

//Recoger los datos de los vertices en los buffers correctamente (segun orden de envio en el programa)
layout (location = 0) in vec3 aPos; //Posicion 
layout (location = 1) in vec2 aTexCoords; //Coordenadas de textura
layout (location = 2) in vec3 aNormal; //Normal
layout (location = 3) in vec3 aTangents; //Tangentes
layout (location = 4) in vec3 aBitangents; //Bitangentes

//Variables de salida del Vertex al Fragment shader
out data{
    vec2 textCoords; //Coordenadas de textura
    vec3 worldPos; // Vertice en coordenadas del mundo 
    vec3 worldNormal; //Normal del vertice en coordenadas del mundo
} vs_out;

//Uniforms para la matriz MVP
uniform mat4 model;
uniform mat4 transInvModel;
uniform mat4 mvp;

void main()
{ 
    //Posicion de vertice por las transfomaciones de la malla (matriz model)
    vs_out.worldPos = vec3(model * vec4(aPos, 1.0));

    //Coordenadas de textura == a que punto de la textura corresponde el vertice tratado en cada llamada al shader
    vs_out.textCoords = aTexCoords;   

    //Pasar el vector normal a coordenadas del mundo
    //Multiplicarlo por la traspuesta de la inversa de la esq. izq. superior de la matriz model
    //Aplicarle a la normal las transformaciones de la malla para adaptarla a estas
    vs_out.worldNormal = mat3(transInvModel) * aNormal;

    //Calcular posicion final del pixel a partir de la multiplicacion de la MVP por la posicion del  vertice
    gl_Position = mvp * vec4(aPos, 1.0);
}