//Especificar version de Opengl a utilizar
#version 330 core

// Variable de salida del Fragment
out vec4 FragColor; //Color final del fragmento

// Variables de entrada desde el VertexShader
in data{
    vec2 textCoords; //Coordenadas de textura
} fs_in;

//Uniforms de las texturas con los datos de los objetos
uniform sampler2D texture_position;
uniform sampler2D texture_normal;
uniform sampler2D texture_diffuseSpecular;

//Estructura para definir luces
struct Light {
    vec3 position; //Posicion de la luz
    vec4 direction; //Direccion de la luz -> para luces dirigidas

    vec3 ambient; //Componente ambiente de la luz
    vec3 diffuse; //Componente difusa de la luz
    vec3 specular; //Componente specular de la luz

    float k; //Variable para el control de la atenuacion
    float cut; //Coseno del angulo que define el radio del foco de la luz dirigida

    bool sombra; //true == sombra activada, false == luz sin sombra
    bool activa; //true == luz activada, false == luz apagada

    mat4 lightMatrix; //Matriz de luz para cada luz dirigida
};

const int numLights = 4;
uniform Light point_lights[numLights]; //Vector de luces puntuales
uniform vec3 posCamera; //Posicion de la camara

//Declaracion de funciones
vec3 calculatePointLight(int i);

void main(){
    //Color final del pixel
    vec3 finalColor;
    finalColor = vec3(0.0, 0.0, 0.0);

    //======================================================
    // CALCULO DE LA LUZ: MODELO DE PHONG
    //======================================================
    vec3 result = vec3(0.0, 0.0, 0.0);

    //Bucle que recorre las luces puntuales
    for (int i = 0; i < numLights; i++){
        result = vec3(0.0, 0.0, 0.0);
        //Si la luz esta activa, se calcula su influencia sobre el fragmento
        if ( point_lights[i].activa == true){
            result = calculatePointLight(i);
            
        }
        //Luz resultante: ambient+diffuse+specular (se va acumulando)
        finalColor = finalColor + result;
    }

    //Se asigna el color resultante a la variable de salida
    FragColor = vec4(finalColor, 1.0);
}

//Funcion que calcula la influencia de una luz puntual sobre el fragmento
vec3 calculatePointLight(int i){

    //Recuperamos los diferentes datos de las texturas guardados en el buffer
    vec3 worldPos = texture(texture_position, fs_in.textCoords).rgb; //POSICION
    vec3 worldNormal = texture(texture_normal, fs_in.textCoords).rgb; //NORMAL
    vec3 colorDiffuse = texture(texture_diffuseSpecular, fs_in.textCoords).rgb; //COLOR DIFUSO
    float brightness = texture(texture_diffuseSpecular, fs_in.textCoords).a; //BRILLO

    // ---- AMBIENTE ----
    //Se multiplica la componente ambiente de la luz por el color ambiente del material del pixel para calcular la incidencia de la luz difusa
    //Solo se multiplica por la componente ambiente de la primera luz, sino la escena se satura demasiado
    vec3 ambient = point_lights[i].ambient * colorDiffuse;
    
    // ----- DIFUSA -----
    //Calcular la direccion entre la fuente de luz y la posicion en el mundo del vertice
    vec3 lightDirection = normalize(point_lights[i].position - worldPos);     //|Se necesitan normalizar los vectores
    vec3 N = normalize(worldNormal);                                   //|para que sean unitarios
    //Calcular productor escalar entre la direccion de la luz y el vector normal normalizado
    //para obtener la influencia de la luz difusa sobre cada superficie
    //max = no queremos el valor negativo del resultado
    float scalar = max(dot(N, lightDirection), 0.0);
    //Lo multiplicamos por la textura difusa
    vec3 diffuse = point_lights[i].diffuse * scalar * colorDiffuse;
    
    // ---- ESPECULAR ----
    //Calcular la direccion entre la camara y la posicion en el mundo del vertice
    vec3 cameraDirection = normalize(posCamera - worldPos);
    //Calcular el reflejo del vector direccion de la luz con la normal
    vec3 directionReflect = reflect(-lightDirection, N);

    //Calcular el componente especular
    float S = pow(max(dot(cameraDirection, directionReflect), 0.0), brightness);
    //Lo multiplicamos por la textura especular
    vec3 specular = point_lights[i].specular * S * colorDiffuse;

    //Resultado del calculo de la luz
    vec3 r = ambient + diffuse + specular;

    return r;
}