//Especificar version de Opengl a utilizar
#version 330 core

// Variable de salida del Fragment
out vec4 FragColor; //Color final del fragmento

// Variables de entrada desde el VertexShader
in data{
    vec2 textCoords; //Coordenadas de textura
    vec3 worldPos; // Fragmento en coordenadas del mundo 
    vec3 worldNormal; //Normal del Fragmento en coordenadas del mundo
} fs_in;

//Estructura para definir luces
struct Light {
    vec3 position; //Posicion de la luz
    vec4 direction; //Direccion de la luz -> para luces dirigidas

    vec3 ambient; //Componente ambiente de la luz
    vec3 diffuse; //Componente difusa de la luz
    vec3 specular; //Componente specular de la luz

    float k; //Variable para el control de la atenuacion
    float cut; //Coseno del angulo que define el radio del foco de la luz dirigida

    bool sombra; //true == sombra activada, false == luz sin sombra
    bool activa; //true == luz activada, false == luz apagada

    mat4 lightMatrix; //Matriz de luz para cada luz dirigida
};

//Estructura con los datos del material
struct Material{
    //Componentes de color del material
    vec4 color_ambient;
    vec4 color_diffuse;
    vec4 color_specular;
    
    float brightness; //Brillo del material -> para el calculo de la la componente especular de la luz
};

const int numLights = 4;
uniform Light point_lights[numLights]; //Vector de luces puntuales
uniform samplerCube shadowCube_0; //Cubo de profundidad para el calculo de las sombras de la luz puntual 0
uniform samplerCube shadowCube_1; //Cubo de profundidad para el calculo de las sombras de la luz puntual 1
uniform samplerCube shadowCube_2; //Cubo de profundidad para el calculo de las sombras de la luz puntual 2
uniform samplerCube shadowCube_3; //Cubo de profundidad para el calculo de las sombras de la luz puntual 3

uniform Material material; //Material de la malla para cada vertice
uniform vec3 posCamera; //Posicion de la camara
uniform sampler2D texture_diffuse; //Textura difusa de la malla
uniform sampler2D texture_specular; //Textura especular de la malla
uniform sampler2D texture_normal; //Textura de normales de la malla
uniform float planoLejano; //Plano lejano de la matriz de proyeccion perspectiva usada para renderizar el cubo de profundidad
uniform bool drawingDistance; //Booleano para la activacion/desactivacion de la distancia de dibujado
uniform float levelOfDrawingDistance; //Distancia dentro de la cual se dibujan los objetos

//Niveles para comparar la componente difusa
const float A = 0.1;
const float B = 0.3;
const float C = 0.6;
const float D = 1.0;

//Declaracion de funciones
vec3 calculatePointLight(int i);
vec3 calculateSpotlight(int i, vec3 N);

void main()
{    
    //Color final del pixel
    vec3 finalColor;
    finalColor = vec3(0.0, 0.0, 0.0);

    //======================================================
    // CALCULO DE LA LUZ: MODELO DE PHONG
    //======================================================
    vec3 result = vec3(0.0, 0.0, 0.0);

    //Bucle que recorre las luces puntuales
    for (int i = 0; i < numLights; i++){
        result = vec3(0.0, 0.0, 0.0);
        //Si la luz esta activa, se calcula su influencia sobre el fragmento
        if ( point_lights[i].activa == true){
            //Si la distancia de dibujado esta activada...
            if ( drawingDistance == true ){
                //Si la distancia entre la camara y el objeto es menor que la predefinida, entonces se dibuja
                if (abs(length(posCamera - fs_in.worldPos)) < levelOfDrawingDistance){
                    result = calculatePointLight(i);
                } else{
                    //Si no se descarta
                    discard;
                }
            } else { //Si no esta activado, calculamos el model de Phong como siempre
                result = calculatePointLight(i);
            }
            
        }
        //Luz resultante: ambient+diffuse+specular (se va acumulando)
        finalColor = finalColor + result;
    }

    //Se asigna el color resultante a la variable de salida
    FragColor = vec4(finalColor, 1.0);
}


//Funcion que calcula la influencia de una luz puntual sobre el fragmento
vec3 calculatePointLight(int i){

        // ---- AMBIENTE ----
        //Se multiplica la componente ambiente de la luz por el color ambiente del material del pixel para calcular la incidencia de la luz difusa
        //Solo se multiplica por la componente ambiente de la primera luz, sino la escena se satura demasiado
        vec3 ambient = point_lights[i].ambient * vec3(texture(texture_diffuse, fs_in.textCoords));
        
        // ----- DIFUSA -----
        //Calcular la direccion entre la fuente de luz y la posicion en el mundo del vertice
        vec3 lightDirection = normalize(point_lights[i].position - fs_in.worldPos);     //|Se necesitan normalizar los vectores
        vec3 N = normalize(fs_in.worldNormal);                                   //|para que sean unitarios

        //Calcular productor escalar entre la direccion de la luz y el vector normal normalizado
        //para obtener la influencia de la luz difusa sobre cada superficie
        //max = no queremos el valor negativo del resultado
        float scalar = max(dot(N, lightDirection), 0.0);
        //Comparamos el factor difuso con los rangos anteriores, de manera que conforme va siendo mayor o menor, le asignamos un valor predefinido
        if (scalar < A) scalar = 0.1;
        else if (scalar < B) scalar = B; //0.3
        else if (scalar < C) scalar = C; //0.6
        else scalar = D; //1.0

        //Lo multiplicamos por la textura difusa
        vec3 diffuse = point_lights[i].diffuse * scalar * vec3(texture(texture_diffuse, fs_in.textCoords));
        
        // ---- ESPECULAR ----
        //Calcular la direccion entre la camara y la posicion en el mundo del vertice
        vec3 cameraDirection = normalize(posCamera - fs_in.worldPos);
        //Calcular el reflejo del vector direccion de la luz con la normal
        vec3 directionReflect = reflect(-lightDirection, N);

        //Calcular el componente especular
        float S = pow(max(dot(cameraDirection, directionReflect), 0.0), material.brightness);
        //Si el factor especular es menor que 0.5, lo asignamo a 0, sino a uno
        if (S < 0.5){
            S = 0.0;
        }else{
            S = 1.0;
        }
        //Lo multiplicamos por la textura especular
        vec3 specular = point_lights[i].specular * S * vec3(texture(texture_specular, fs_in.textCoords));

        //Resultado del calculo de la luz
        vec3 r = ambient + diffuse + specular;

        return r;
}
