//Especificar version de Opengl a utilizar
#version 330 core

//Primitiva que se espera en la entrada -> en este caso, un triangulo (3 vertices)
layout (triangles) in;
//Primitiva que sale del geometry shader -> en este caso, una malla o tira de
//triangulos (exactamente 6 -18 vertices-, uno por cada lado del cubo de profundidad)
layout (triangle_strip, max_vertices=18) out;

//Uniform con las matrices de luz para cada lado del cubo
uniform mat4 lightMatrix[6];

//Salida al fragment -> punto en coordenadas del mundo (multiplicado por la matriz modelo en el vertex shader)
out vec4 worldPos; 

void main()
{
    //Bucle para recorrer las 6 caras del cubo
    for(int i = 0; i < 6; i++)
    {
        //Variable predefinida de GLSL que permite especificar la cara del cubo que se va a renderizar (0-6)
        gl_Layer = i;
        //Bucle para recorrer los tres vertices de cada triangulo de entrada
        for(int j = 0; j < 3; j++)
        {
            //Entrada desde el vertex (vertice multiplicado por su matriz modelo)
            worldPos = gl_in[j].gl_Position;
            //Asignamos a gl_Position el vertice en coordenadas de luz para renderizar el mapa de profundidad de la cada cara
            gl_Position = lightMatrix[i] * worldPos;
            //Emitimos el vertice al fragment
            EmitVertex();
        }
        //Cada vez que se acabe un triangulo 
        EndPrimitive();
    }
} 