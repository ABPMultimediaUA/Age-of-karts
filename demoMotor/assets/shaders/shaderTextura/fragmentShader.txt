//Especificar version de Opengl a utilizar
#version 330 core

// Variable de salida del Fragment
out vec4 FragColor; //Color final del pixel

// Variables de entrada desde el VertexShader
in data{
    vec2 textCoords; //Coordenadas de textura
    vec3 worldPos; // Vertice en coordenadas del mundo 
    vec3 worldNormal; // Vector de normales del vertice en coordenadas del mundo
} fs_in;

//Estructura para definir luces
struct Light {
    vec3 position; //Posicion de la luz
    vec4 direction; //Direccion de la luz -> para luces dirigidas

    vec3 ambient; //Componente ambiente de la luz
    vec3 diffuse; //Componente difusa de la luz
    vec3 specular; //Componente specular de la luz

    float k; //Variable para el control de la atenuacion
    float cut; //Coseno del angulo que define el radio del foco de la luz dirigida

    bool sombra; //true == sombra activada, false == luz sin sombra
    bool activa; //true == luz activada, false == luz apagada

    mat4 lightMatrix; //Matriz de luz para cada luz dirigida
};

//Estructura con los datos del material
struct Material{
    //Componentes de color del material
    vec4 color_ambient;
    vec4 color_diffuse;
    vec4 color_specular;
    //Brillo del material -> para el calculo de la la componente especular de la luz
    float brightness;
};

const int numLights = 3;
uniform Light point_lights[numLights]; //Vector de luces puntuales
uniform samplerCube shadowCube_0; //Cubo de profundidad para el calculo de las sombras de la luz puntual 0
uniform samplerCube shadowCube_1; //Cubo de profundidad para el calculo de las sombras de la luz puntual 1
uniform samplerCube shadowCube_2; //Cubo de profundidad para el calculo de las sombras de la luz puntual 2
uniform Light spot_lights[numLights]; //Vector de luces dirigidas
uniform sampler2D shadowMap_0; //Textura con el mapa de profundidad para el calculo de las sombras de la luz dirigida 0
uniform sampler2D shadowMap_1; //Textura con el mapa de profundidad para el calculo de las sombras de la luz dirigida 1

uniform Material material; //Material de la malla para cada vertice
uniform vec3 posCamera; //Posicion de la camara
uniform sampler2D texture_diffuse; //Textura difusa de la malla
uniform sampler2D texture_specular; //Textura especular de la malla
uniform float planoLejano; //Plano lejano de la matriz de proyeccion perspectiva usada para renderizar el cubo de profundidad
uniform bool drawingDistance; //Booleano para la activacion/desactivacion de la distancia de dibujado
uniform float levelOfDrawingDistance; //Distancia dentro de la cual se dibujan los objetos

//Declaracion de funciones
vec3 calculatePointLight(int i);
vec3 calculateSpotlight(int i);
float calculatePointShadows(samplerCube c, int luz, vec3 N);
float calculateDirectionalShadows(sampler2D c, int luz, vec3 N);

void main()
{    
    //Color final del pixel
    vec3 finalColor;
    finalColor = vec3(0.0, 0.0, 0.0);

    //======================================================
    // CALCULO DE LA LUZ: MODELO DE PHONG
    //======================================================
    vec3 result = vec3(0.0, 0.0, 0.0);

    //Bucle que recorre las luces puntuales
    for (int i = 0; i < numLights; i++){
        result = vec3(0.0, 0.0, 0.0);
        //Si la luz esta activa, se calcula su influencia sobre el fragmento
        if ( point_lights[i].activa == true){
            //Si la distancia de dibujado esta activada...
            if ( drawingDistance == true ){
                //Si la distancia entre la camara y el objeto es menor que la predefinida, entonces se dibuja
                if (abs(length(posCamera - fs_in.worldPos)) < levelOfDrawingDistance){
                    result = calculatePointLight(i);
                } else{
                    //Si no se descarta
                    discard;
                }
            } else { //Si no esta activado, calculamos el model de Phong como siempre
                result = calculatePointLight(i);
            }
            
        }
        //Luz resultante: ambient+diffuse+specular (se va acumulando)
        finalColor = finalColor + result;
    }

    //Bucle que recorre las luces dirigidas
    for (int i = 0; i < numLights; i++){
        result = vec3(0.0, 0.0, 0.0);
        //Si la luz esta activa, se calcula su influencia sobre el fragmento
        if ( spot_lights[i].activa == true){
            //Si la distancia de dibujado esta activada...
            if ( drawingDistance == true ){
                //Si la distancia entre la camara y el objeto es menor que la predefinida, entonces se dibuja
                if (abs(length(posCamera - fs_in.worldPos)) < levelOfDrawingDistance){
                    result = calculateSpotlight(i);
                } else{
                    //Si no se descarta
                    discard;
                }
            } else { //Si no esta activado, calculamos el model de Phong como siempre
                result = calculateSpotlight(i);
            }
            
        }
        //Luz resultante: ambient+diffuse+specular (se va acumulando)
        finalColor = finalColor + result;
    }

    //Se asigna el color resultante a la variable de salida
    FragColor = vec4(finalColor, 1.0);
}

//Funcion que calcula la influencia de una luz puntual sobre el vertice
vec3 calculatePointLight(int i){

        // *** ATENUACION ***
        // a = 1/(1+kd²), donde d es la distancia entre la luz y el vertice y k es una constante predefinida por nosotros para controlar la atenuacion
        // Tras calcularla, la atenuacion debe multiplicarse por la componente ambiente, difusa y especular de la luz
        float d = length(point_lights[i].position - fs_in.worldPos);
        float attenuation = 1.0 / (1.0 + (point_lights[i].k * pow(d,2))); 

        // ---- AMBIENTE ----
        //Se multiplica la componente ambiente de la luz por el color ambiente del material del pixel para calcular la incidencia de la luz difusa
        //Solo se multiplica por la componente ambiente de la primera luz, sino la escena se satura demasiado
        vec3 ambient = point_lights[i].ambient * vec3(texture(texture_diffuse, fs_in.textCoords));
        ambient *= attenuation;
        
        // ----- DIFUSA -----
        //Calcular la direccion entre la fuente de luz y la posicion en el mundo del vertice
        vec3 lightDirection = normalize(point_lights[i].position - fs_in.worldPos);     //|Se necesitan normalizar los vectores
        vec3 N = normalize(fs_in.worldNormal);                                   //|para que sean unitarios

        //Calcular productor escalar entre la direccion de la luz y el vector normal normalizado
        //para obtener la influencia de la luz difusa sobre cada superficie
        //max = no queremos el valor negativo del resultado
        float scalar = max(dot(N, lightDirection), 0.0);

        //Lo multiplicamos por la textura difusa
        vec3 diffuse = point_lights[i].diffuse * scalar * vec3(texture(texture_diffuse, fs_in.textCoords));
        diffuse *= attenuation;
        
        // ---- ESPECULAR ----
        //Calcular la direccion entre la camara y la posicion en el mundo del vertice
        vec3 cameraDirection = normalize(posCamera - fs_in.worldPos);
        //Calcular el reflejo del vector direccion de la luz con la normal
        vec3 directionReflect = reflect(-lightDirection, N);

        //Calcular el componente especular
        float S = pow(max(dot(cameraDirection, directionReflect), 0.0), material.brightness);
        vec3 specular = point_lights[i].specular * S * vec3(texture(texture_specular, fs_in.textCoords));
        specular *= attenuation;

        // ---- SOMBRAS ----
        //Calculamos el valor de la sombra
        float shadow = 0.0;
        //Segun la luz que estemos tratando, se usa el cubo de profundidad correspondiente, siempre que se requiera que la luz tenga sombras
        if ( i == 0 ){
            if ( point_lights[i].sombra == true )
            shadow = calculatePointShadows(shadowCube_0, i, N);
        } else if ( i == 1 ){
            if ( point_lights[i].sombra == true )
            shadow = calculatePointShadows(shadowCube_1, i, N);
        } else if ( i == 2 ){
            if ( point_lights[i].sombra == true )
            shadow = calculatePointShadows(shadowCube_2, i, N);
        }
        //Lo multiplicamos por las componentes difusa y especular
        diffuse = (1.0 - shadow) * diffuse;
        specular = (1.0 - shadow) * specular;

        //Resultado del calculo de la luz
        vec3 r = ambient + diffuse + specular;

        return r;
}


//Funcion que calcula la influencia de una luz dirigida o foco sobre el vertice
vec3 calculateSpotlight(int i){

        //Resultado del calculo de la luz
        vec3 r;

        // *** ATENUACION ***
        // a = 1/(1+kd²), donde d es la distancia entre la luz y el vertice y k es una constante predefinida por nosotros para controlar la atenuacion
        // Tras calcularla, la atenuacion debe multiplicarse por la componente ambiente, difusa y especular de la luz
        float d = length(spot_lights[i].position - fs_in.worldPos);
        float attenuation = 1.0 / (1.0 + (spot_lights[i].k * pow(d,2))); 

        //Calcular la direccion entre la fuente de luz y la posicion en el mundo del vertice
        vec3 lightDirection = normalize(spot_lights[i].position - fs_in.worldPos);     //|Se necesitan normalizar los vectores
        vec3 N = normalize(fs_in.worldNormal);                                   //|para que sean unitarios

        //Comprobar si el vertice esta dentro del foco mediante el producto escalar entre el vector direccion de la luz y el vector entre la luz y el vertice
        float inside = dot(lightDirection, normalize(vec3(-spot_lights[i].direction))); 

        //Si el vertice esta dentro del foco, se realizan los calculos normales
        if ( inside > spot_lights[i].cut ){

            // ---- AMBIENTE ----
            //Se multiplica la componente ambiente de la luz por el color del ambiente del pixel para calcular la incidencia de la luz difusa
            //Solo se multiplica por la componente ambiente de la primera luz, sino la escena se satura demasiado
            vec3 ambient = spot_lights[i].ambient * vec3(texture(texture_diffuse, fs_in.textCoords));
            ambient *= attenuation;
            
            // ----- DIFUSA -----
            //Calcular productor escalar entre la direccion de la luz y el vector normal normalizado
            //para obtener la influencia de la luz difusa sobre cada superficie
            //max = no queremos el valor negativo del resultado
            float scalar = max(dot(N, lightDirection), 0.0);

            //Lo multiplicamos por la textura difusa
            vec3 diffuse = spot_lights[i].diffuse * scalar * vec3(texture(texture_diffuse, fs_in.textCoords));
            diffuse *= attenuation;
            
            // ---- ESPECULAR ----
            //Calcular la direccion entre la camara y la posicion en el mundo del vertice
            vec3 cameraDirection = normalize(posCamera - fs_in.worldPos);
            //Calcular el reflejo del vector direccion de la luz con la normal
            vec3 directionReflect = reflect(-lightDirection, N);

            //Calcular el componente especular
            float S = pow(max(dot(cameraDirection, directionReflect), 0.0), material.brightness);
            vec3 specular = spot_lights[i].specular * S * vec3(texture(texture_specular, fs_in.textCoords));
            specular *= attenuation;

            // ---- SOMBRAS ----
            //Calculamos el valor de la sombra
            float shadow = 0.0;
            //Segun la luz que estemos tratando, se usa el cubo de profundidad correspondiente, siempre que se requiera que la luz tenga sombras
            if ( i == 0 ){
                if ( spot_lights[i].sombra == true )
                shadow = calculateDirectionalShadows(shadowMap_0, i, N);
            } else if ( i == 1 ){
                if ( spot_lights[i].sombra == true )
                shadow = calculateDirectionalShadows(shadowMap_1, i, N);
            }
            //Lo multiplicamos por las componentes difusa y especular
            diffuse = (1.0 - shadow) * diffuse;
            specular = (1.0 - shadow) * specular;

            r = ambient + diffuse + specular;
        }else{
            //Si no esta dentro del foco, se calcula solo la ambiente para que no este totalmente a oscuras el objeto
            vec3 ambient = spot_lights[i].ambient * vec3(texture(texture_diffuse, fs_in.textCoords));
            ambient *= attenuation;
            r = ambient;
        }

        return r;

}


//Funcion para el calculo de las sombras de una luz dirigida. Devuelve un float (grado de penumbra) que se multiplica por las 
//componentes difusa y especular de la luz 
float calculatePointShadows(samplerCube c, int luz, vec3 N){
    //Vector direccion entre el fragmento y la luz
    vec3 fragToLight = fs_in.worldPos - point_lights[luz].position; 
    //Despues, obtenemos la profundidad del fragmento actual (longitud del vector anterior)
    float aDepth = length(fragToLight);
    //BIAS = Variable que sirve como rango para evitar el problema del acne en el dibujado de las sombras
    //Sin ella, se dibujan finas lineas negras por toda la escena iluminada, produciendo un efecto parecido a una teselacion
    float bias = 0.005;
    //Supermuestreo para definir los bordes de las sombras (PCF con un numero determinado de muestras)
    int nMuestras  = 20; //Numero de muestra 
    //array de vec3 con las direcciones de muestra
    vec3 direccionesMuestra[20] = vec3[](vec3( 1,  1,  1), vec3( 1, -1,  1), vec3(-1, -1,  1), vec3(-1,  1,  1), 
    vec3( 1,  1, -1), vec3( 1, -1, -1), vec3(-1, -1, -1), vec3(-1,  1, -1), vec3( 1,  1,  0), vec3( 1, -1,  0), 
    vec3(-1, -1,  0), vec3(-1,  1,  0), vec3( 1,  0,  1), vec3(-1,  0,  1), vec3( 1,  0, -1), vec3(-1,  0, -1),
    vec3( 0,  1,  1), vec3( 0, -1,  1), vec3( 0, -1, -1), vec3( 0,  1, -1));
    float shadow = 0.0;
    float d = length(posCamera - fs_in.worldPos); //Distancia entre la camara y el fragmento
    float radio = 0.1;  //Radio alrededor del vector entre la luz y el fragmento que se va a muestrear
                        //Cuanto mas alto, sombras mas difuminadas
    for(int i = 0; i < nMuestras; i++)
    {
        //Obtenemos la profundidad del cubo a partir del vector entre la posicion del fragmento y de la luz
        float cubeDepth = texture(c, fragToLight + direccionesMuestra[i] * radio).r; //Nos devuelve la profundidad en el rango [0,1]
        cubeDepth *= planoLejano; //La multiplicamos por el plano lejano para obtenerla en el rango [0, planoLejano]
        //Si la profundidad del fragmento es mayor que la profundidad mas cercana desde la perspectiva de la luz,
        //entonces el fragmento se encuentro en penumbra
        if(aDepth - bias > cubeDepth)
            shadow = shadow + 1.0;
    }
    //Dividimos el valor de sombra entre el numero de muestras tratadas para hacer la media
    shadow = shadow/float(nMuestras);  
    //Puntos que estan fuera del circulo cumplen que: (x - center_x)^2 + (y - center_y)^2 < radius^2
    //Para evitar el sombreado de las zonas del mapa exteriores al plano lejano utilizado en la matriz proyeccion de la luz
    if ((pow(fragToLight.x,2) + pow(fragToLight.z,2)) > pow(planoLejano-1.0, 2)) shadow = 0.0;

    return shadow;
}

//Funcion para el calculo de las sombras de una luz dirigida. Devuelve un float (grado de penumbra) que se multiplica por las 
//componentes difusa y especular de la luz 
float calculateDirectionalShadows(sampler2D c, int luz, vec3 N){
    //Calculamos la posicion del vertice respecto a la luz
    vec4 Lpos = spot_lights[luz].lightMatrix * vec4(fs_in.worldPos, 1.0);
    //Normalizar las coordenadas del vertice en el espacio de la luz -> dividir las coordenadas x,y,z por w
    vec3 normCoords = Lpos.xyz/Lpos.w;
    //Transformar las coordenadas normalizadas del rango [-1,1] al rango [0,1]
    normCoords = normCoords * 0.5 + 0.5; 
    //Obtener la profundidad actual de fragmento
    float aDepth = normCoords.z;
    //BIAS = Variable que sirve como rango para evitar el problema del acne en el dibujado de las sombras
    //Sin ella, se dibujan finas lineas negras por toda la escena iluminada, produciendo un efecto parecido a una teselacion
    float bias = 0.001;
    //Se aplica la tecnica del PCF, para difuminar los bordes de las sombras, ya que estos (especialmente los diagonales)
    //se ven escalonados
    float shadow = 0.0;
    //Recogemos el tamaño del mapa de profundidad
    //Al dividir 1.0 entre este, hacemos que ninguna de las muestras que trataremos despues tenga la misma profundidad
    vec2 sampleSize = 1.0 / textureSize(c, 0);
    //Bucle para tratar todas las muestras,en este caso 9
    for(int i = -1; i <= 1; i++)
    {
        for(int j = -1; j <= 1; j++)
        {
            //Obtenemos la profundidad mas cercana de cada una de las muestras
            float pcfDepth = texture(c, normCoords.xy + vec2(i, j) * sampleSize).r; 
            //Sumamos iteradamente al valor de sombra resultante
            //Si la profundidad del fragmento es mayor que la profundidad mas cercana desde la perspectiva de la luz,
            //entonces el fragmento se encuentro en penumbra
            shadow += aDepth - bias > pcfDepth ? 1.0 : 0.0;        
        }    
    }
    //Dividimos el valor de sombra entre el numero de muestras tratadas para hacer la media
    shadow /= 9.0;
    //Si la profundidad de las coordenadas del fragmento superan el 1.0 (maximo en coordenadas normalizadas) entonces no hay ninguna sombra posible
    //Para que no se sombre aquellas zonas que queden fuera del plano lejano utilizado
    if(normCoords.z > 1.0)
        shadow = 0.0;

    return shadow;
}
