//Especificar version de Opengl a utilizar
#version 330 core

//Recoger los datos de los vertices en los buffers correctamente (segun orden de envio en el programa)
layout (location = 0) in vec3 aPos; //Posicion 
layout (location = 1) in vec2 aTexCoords; //Coordenadas de textura
layout (location = 2) in vec3 aNormal; //Normal
layout (location = 3) in vec3 aTangents; //Tangentes
layout (location = 4) in vec3 aBitangents; //Bitangentes

//Variables de salida del Vertex al Fragment shader
out data{
    vec2 textCoords; //Coordenadas de textura
    vec3 worldPos; // Vertice en coordenadas del mundo 
    mat3 tbnMatrix; //Inversa de la matriz TBN
} vs_out;

//Uniforms para las distintas matrices necesarias para calcular la MVP
uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;

void main()
{ 
    //Posicion de vertice por las transfomaciones de la malla (matriz model)
    vs_out.worldPos = vec3(model * vec4(aPos, 1.0));

    //Coordenadas de textura == a que punto de la textura corresponde el vertice tratado en cada llamada al shader
    vs_out.textCoords = aTexCoords;   

    //Crear la matriz TBN (tangentes - bitangentes - normales), que posteriormente usaremos para pasar los datos al espacio tangente y realizar los calculos de la luz en el fragment
    //Primero, pasamos los tres vectores a las coordenadas del sistema, similar a como hemos hecho con la posicion del vertice antes
    vec3 tang = normalize(vec3(model*vec4(aTangents, 0.0)));        //| Los normalizamos para
    vec3 bitang = normalize(vec3(model*vec4(aBitangents, 0.0)));    //| que esten entre -1 y 1
    vec3 norm = normalize(vec3(model*vec4(aNormal, 0.0)));          //|
    mat3 TBN = mat3(tang, bitang, norm);
    //Inversa para poder pasar a espacio tangente
    vs_out.tbnMatrix = transpose(TBN);

    //Calcular posicion final del pixel a partir de la multiplicacion de la MVP por la posicion del  vertice
    gl_Position = projection * view * model * vec4(aPos, 1.0);
}